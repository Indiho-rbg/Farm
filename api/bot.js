const { Telegraf, Markup } = require("telegraf");
const express = require("express");
const mongoose = require("mongoose");

const bot = new Telegraf(process.env.BOT_TOKEN);
const app = express();
app.use(express.json());

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB –±–µ–∑ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
mongoose.connect('mongodb+srv://<myUser>:<Holo12345>@cluster0.cv5e5.mongodb.net/farmgame?retryWrites=true&w=majority&appName=Cluster0')
  .then(() => {
    console.log('MongoDB connected');
  })
  .catch(err => {
    console.log('MongoDB connection error:', err);
  });

// üìå –ú–æ–¥–µ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
const User = mongoose.model("User", new mongoose.Schema({
    telegramId: { type: String, required: true, unique: true },
    coins: { type: Number, default: 0 }
}));

// üìå –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start
bot.start(async (ctx) => {
    let user = await User.findOne({ telegramId: ctx.from.id });

    if (!user) {
        user = new User({ telegramId: ctx.from.id });
        await user.save();
    }

    ctx.reply(
        `–ü—Ä–∏–≤—ñ—Ç, ${ctx.from.first_name}! –£ —Ç–µ–±–µ ${user.coins} –º–æ–Ω–µ—Ç.`,
        Markup.inlineKeyboard([
            [Markup.button.webApp("üéÆ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≥—Ä—É", "https://farm-ochre-one.vercel.app/")],
            [Markup.button.callback("‚Ñπ –ü—Ä–æ –≥—Ä—É", "about")],
            [Markup.button.callback("‚ùì –î–æ–ø–æ–º–æ–≥–∞", "help")]
        ])
    );
});

// üìå –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ –≥—Ä—É"
bot.action("about", (ctx) => {
    ctx.answerCbQuery(); // –ó–∞–∫—Ä–∏–≤–∞—î "—á–µ–∫–∞—é—á–µ" –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    ctx.reply("–¶–µ –≤–µ–±-–≥—Ä–∞, –¥–µ —Ç–∏ –º–æ–∂–µ—à —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —Å–≤–æ—é —Ñ–µ—Ä–º—É —Ç–∞ –∑–∞—Ä–æ–±–ª—è—Ç–∏ –≤—ñ—Ä—Ç—É–∞–ª—å–Ω—ñ –º–æ–Ω–µ—Ç–∏! üåæüí∞");
});

// üìå –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–æ–ø–æ–º–æ–≥–∞"
bot.action("help", (ctx) => {
    ctx.answerCbQuery();
    ctx.reply("–ù–∞—Ç–∏—Å–Ω–∏ \"–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≥—Ä—É\", —â–æ–± –ø–æ—á–∞—Ç–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Ñ–µ—Ä–º–æ—é! üè°");
});

// üìå API-–µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –≥—Ä–∞–≤—Ü—è –∑ –≥—Ä–∏
app.post("/api/update-coins", async (req, res) => {
    const { telegramId, coins } = req.body;

    const user = await User.findOneAndUpdate(
        { telegramId },
        { $inc: { coins } },
        { new: true }
    );

    if (!user) return res.status(404).send("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");

    res.send({ success: true, newBalance: user.coins });
});

// üìå –í–µ–±—Ö—É–∫ –¥–ª—è Telegram
app.post(`/api/bot`, async (req, res) => {
    await bot.handleUpdate(req.body);
    res.sendStatus(200);
});

// üìå –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
